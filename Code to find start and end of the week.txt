private String getWeekByDate(String date) {

			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy/MM/dd");
			LocalDate localDate = formatter.parseLocalDate(date);
			int dayOfWeek = localDate.getDayOfWeek();

			String startWeekDate = "";
			String endWeekDate = "";
			try {
				List<String> startAndEnd = new LinkedList<String>();
				if (!ServicesUtil.isEmpty(dayOfWeek)) {

					if (dayOfWeek >= 1 && dayOfWeek <= 7) {

						if (dayOfWeek == 1) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 2) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 3) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 4) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 5) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 6) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						} else if (dayOfWeek == 7) {
							startAndEnd = findStartAndEndOfWeek(date, dayOfWeek);
							startWeekDate = startAndEnd.get(0);
							endWeekDate = startAndEnd.get(1);
						}
					} else {
						logger.error("[OBXSchedulerDao][getWeekByDate][error][Enter the correct date]");
					}
				}
			} catch (Exception e) {
				logger.error("[OBXSchedulerDao][getWeekByDate][error]" + e.getMessage());
			}
			String week = " CREATED_AT >='" + startWeekDate + "' AND CREATED_AT <='" + endWeekDate + "'";
			return week;
		}

		//@SuppressWarnings("deprecation")
		private List<String> findStartAndEndOfWeek(String date, int dayOfWeek) {
			List<String> startAndEnd = new LinkedList<String>();

			try {

				if (dayOfWeek == 1) {
					startAndEnd.add(date);
					String end = getRequiredDate(date, +5);
					startAndEnd.add(end);
				} else if (dayOfWeek == 2) {
					// to find start of the week
					String start = getRequiredDate(date, -1);
					startAndEnd.add(start);

					// to find end of the week
					String end = getRequiredDate(date, +4);
					startAndEnd.add(end);
				} else if (dayOfWeek == 3) {
					// to find start of the week
					String start = getRequiredDate(date, -2);
					startAndEnd.add(start);

					// to find end of the week
					String end = getRequiredDate(date, +3);
					startAndEnd.add(end);
				} else if (dayOfWeek == 4) {
					// to find start of the week
					String start = getRequiredDate(date, -3);
					startAndEnd.add(start);

					// to find end of the week

					String end = getRequiredDate(date, +2);
					startAndEnd.add(end);

				} else if (dayOfWeek == 5) {
					// to find start of the week
					String start = getRequiredDate(date, -4);
					startAndEnd.add(start);

					// to find end of the week

					String end = getRequiredDate(date, +1);
					startAndEnd.add(end);

				} else if (dayOfWeek == 6) {
					// to find start of the week
					String start = getRequiredDate(date, -5);
					startAndEnd.add(start);

					// to find end of the week
					startAndEnd.add(date);

				} else if (dayOfWeek == 7) {
					// to find start of the week
					String start = getRequiredDate(date, -6);
					startAndEnd.add(start);

					// to find end of the week

					String end = getRequiredDate(date, -1);
					startAndEnd.add(end);
				}
			} catch (Exception e) {
				logger.error("[OBXSchedulerDao][findStartAndEndOfWeek][error]" + e.getMessage());
			}

			return startAndEnd;
		}

		private String getRequiredDate(String date,int i) {
			try {
				final Calendar cal = Calendar.getInstance();
				cal.setTime(new SimpleDateFormat("yyyy/MM/dd").parse(date));
				cal.add(Calendar.DATE, i);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
				date = sdf.format(cal.getTime());
			} catch (Exception ex) {
				logger.error(ex.getMessage(), ex);
			}
			return date;
		}